<%@page import="net.sf.json.JSONObject"%>
<%@page import="net.sf.json.JSONSerializer"%>
<%@page import="org.oscarehr.util.SpringUtils"%>
<%@page import="org.oscarehr.common.dao.AdmissionDao"%>
<%@page import="org.oscarehr.common.model.Admission"%>
<%@page import="org.oscarehr.PMmodule.dao.ProgramProviderDAO"%>
<%@page import="org.oscarehr.PMmodule.model.ProgramProvider"%>
<%@page import="java.util.Date"%>
<%@page import="org.oscarehr.util.LoggedInInfo"%>
<%@page import="org.oscarehr.util.OscarAuditLogger"%>
<%@page import="org.oscarehr.PMmodule.dao.ClientReferralDAO"%>
<%@page import="org.oscarehr.PMmodule.model.ClientReferral"%>

<%
	LoggedInInfo loggedInInfo=LoggedInInfo.getLoggedInInfoFromSession(request);
	String providerNo=loggedInInfo.getLoggedInProviderNo();
	AdmissionDao admissionDao = SpringUtils.getBean(AdmissionDao.class);
	ProgramProviderDAO programProviderDao = (ProgramProviderDAO)SpringUtils.getBean(ProgramProviderDAO.class);
	ClientReferralDAO referralDao = (ClientReferralDAO)SpringUtils.getBean(ClientReferralDAO.class);
	
	
	boolean success = false;
    String error = "";
	String method = request.getParameter("method");	
	JSONObject json = new JSONObject();
	json.put("method", method);
	
	if ("save_admission_date".equals(method)) {
		Integer id = Integer.parseInt(request.getParameter("admissionId"));
		String date = request.getParameter("date");
		Date d = null;
		
		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm");
		try {
			d = formatter.parse(date);
		}catch(java.text.ParseException e) {
			success=false;
			error = "Unable to parse date";
		}
		
		//does this provider have rights to this program?
		
		
		if(d != null) {
			Admission admission = admissionDao.find(id);
			if(admission != null) {
				Integer programId = admission.getProgramId();
				if(programProviderDao.isThisProgramInProgramDomain(providerNo,programId)) {
					admission.setAdmissionDate(d);
					admissionDao.merge(admission);
					
					OscarAuditLogger.getInstance().log("update_admission_date",date,String.valueOf(id));
					success=true;
				} else {
					error="You have insufficient rights to this program";
					success=false;
				}
				
			} else {
				error = "Admission record not found";
				success=false;
			}
		} 
		
 		
	}
	
	else if ("save_discharge_date".equals(method)) {
		Integer id = Integer.parseInt(request.getParameter("admissionId"));
		String date = request.getParameter("date");
		Date d = null;
		
		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm");
		try {
			d = formatter.parse(date);
		}catch(java.text.ParseException e) {
			success=false;
			error = "Unable to parse date";
		}
		
		//does this provider have rights to this program?
		
		
		if(d != null) {
			Admission admission = admissionDao.find(id);
			if(admission != null) {
				Integer programId = admission.getProgramId();
				if(programProviderDao.isThisProgramInProgramDomain(providerNo,programId)) {
					admission.setDischargeDate(d);
					admissionDao.merge(admission);
					
					OscarAuditLogger.getInstance().log("update_discharge_date",date,String.valueOf(id));
					success=true;
				} else {
					error="You have insufficient rights to this program";
					success=false;
				}
				
			} else {
				error = "Admission record not found";
				success=false;
			}
		} 
		
 		
	}
	
	else if ("save_referral_date".equals(method)) {
		Long id = Long.parseLong(request.getParameter("referralId"));
		String date = request.getParameter("date");
		Date d = null;
		
		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm");
		try {
			d = formatter.parse(date);
		}catch(java.text.ParseException e) {
			success=false;
			error = "Unable to parse date";
		}
		
		
		if(d != null) {
			ClientReferral referral = referralDao.getClientReferral(id);
			if(referral != null) {
				Long programId = referral.getProgramId();
				if(programProviderDao.isThisProgramInProgramDomain(providerNo,programId.intValue())) {
					referral.setReferralDate(d);
					referralDao.saveClientReferral(referral);
					
					OscarAuditLogger.getInstance().log("update_referral_date",date,String.valueOf(id));
					success=true;
				} else {
					error="You have insufficient rights to this program";
					success=false;
				}
				
			} else {
				error = "Referral record not found";
				success=false;
			}
		} 
		
 		
	}
	
	else if ("save_completion_date".equals(method)) {
		Long id = Long.parseLong(request.getParameter("referralId"));
		String date = request.getParameter("date");
		Date d = null;
		
		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm");
		try {
			d = formatter.parse(date);
		}catch(java.text.ParseException e) {
			success=false;
			error = "Unable to parse date";
		}
		
		
		if(d != null) {
			ClientReferral referral = referralDao.getClientReferral(id);
			if(referral != null) {
				Long programId = referral.getProgramId();
				if(programProviderDao.isThisProgramInProgramDomain(providerNo,programId.intValue())) {
					referral.setCompletionDate(d);
					referralDao.saveClientReferral(referral);
					
					OscarAuditLogger.getInstance().log("update_completion_date",date,String.valueOf(id));
					success=true;
				} else {
					error="You have insufficient rights to this program";
					success=false;
				}
				
			} else {
				error = "Referral record not found";
				success=false;
			}
		} 
		
 		
	}

	
	else {
		success = false;
		error = "Invalid method supplied.";
	}
    response.setContentType("text/x-json");    
	
	json.put("success", success);
	json.put("error", error);
	
    json.write(out);    	
%>
